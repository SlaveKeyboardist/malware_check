import os
import zipfile
import base64
from cryptography.fernet import Fernet
import requests
import re
import subprocess

def unzip_wheel(wheel_path, extract_to):
    with zipfile.ZipFile(wheel_path, 'r') as zip_ref:
        zip_ref.extractall(extract_to)

def find_infected_files(directory):
    infected_files = []
    for root, _, files in os.walk(directory):
        for file in files:
            if file.endswith('.py'):
                file_path = os.path.join(root, file)
                with open(file_path, 'r', errors='ignore') as f:
                    content = f.read()
                    if 'discord.com/api/webhooks' in content or 'pastebin.com' in content:
                        infected_files.append(file_path)
    return infected_files

def decrypt_string(encrypted_string, key):
    try:
        fernet = Fernet(key)
        decrypted_string = fernet.decrypt(encrypted_string.encode()).decode()
        return decrypted_string
    except Exception as e:
        log(f"Failed to decrypt string {encrypted_string}: {str(e)}")
        return None

def fetch_from_pastebin(url):
    response = requests.get(url)
    if response.status_code == 200:
        return response.text
    return None

def analyze_file(file_path, key):
    with open(file_path, 'r', errors='ignore') as f:
        content = f.read()
        encrypted_strings = re.findall(r'[a-zA-Z0-9-_]{32,}', content)
        for enc_str in encrypted_strings:
            decrypted_url = decrypt_string(enc_str, key)
            if decrypted_url and "pastebin.com" in decrypted_url:
                raw_content = fetch_from_pastebin(decrypted_url)
                if raw_content:
                    further_encrypted_strings = re.findall(r'[a-zA-Z0-9-_]{32,}', raw_content)
                    for further_enc_str in further_encrypted_strings:
                        final_content = decrypt_string(further_enc_str, key)
                        if final_content:
                            log(f"Decrypted content: {final_content}")

def log(message):
    with open("malware_check_log.txt", "a") as log_file:
        log_file.write(message + "\n")
    print(message)

def verify_installed_packages():
    installed_packages = subprocess.check_output([sys.executable, '-m', 'pip', 'freeze']).decode().split('\n')
    for package in installed_packages:
        if package:
            pkg_name, pkg_version = package.split('==')
            try:
                legit_version = subprocess.check_output([sys.executable, '-m', 'pip', 'search', pkg_name]).decode()
                if f"{pkg_name} ({pkg_version})" not in legit_version:
                    log(f"Potentially malicious package detected: {pkg_name}=={pkg_version}")
            except subprocess.CalledProcessError as e:
                log(f"Error checking package {pkg_name}: {str(e)}")

def analyze_requirements_txt(file_path):
    with open(file_path, 'r') as f:
        lines = f.readlines()
    for line in lines:
        if line.startswith('pip install'):
            package = line.split(' ')[2]
        else:
            package = line.strip()
        if package:
            try:
                pkg_name, pkg_version = package.split('==')
                legit_version = subprocess.check_output([sys.executable, '-m', 'pip', 'search', pkg_name]).decode()
                if f"{pkg_name} ({pkg_version})" not in legit_version:
                    log(f"Potentially malicious package detected in {file_path}: {pkg_name}=={pkg_version}")
            except subprocess.CalledProcessError as e:
                log(f"Error checking package {pkg_name} in {file_path}: {str(e)}")

def main():
    # Unzip and analyze wheel files
    wheel_files = [file for file in os.listdir() if file.endswith('.whl')]
    extract_to = "extracted_wheel_files"
    os.makedirs(extract_to, exist_ok=True)

    for wheel_file in wheel_files:
        log(f"Unzipping wheel file: {wheel_file}")
        unzip_wheel(wheel_file, extract_to)

    log("Searching for infected files...")
    infected_files = find_infected_files(extract_to)

    if infected_files:
        key = input("Enter the decryption key: ")
        for file_path in infected_files:
            log(f"Analyzing file: {file_path}")
            analyze_file(file_path, key)
    else:
        log("No infected files found.")

    # Verify installed packages
    log("Verifying installed packages...")
    verify_installed_packages()

    # Analyze text files for requirements.txt formatting or pip install commands
    log("Analyzing text files for package information...")
    for root, _, files in os.walk('.'):
        for file in files:
            if file.endswith('.txt') or file.endswith('.py') or file.endswith('.sh'):
                file_path = os.path.join(root, file)
                log(f"Analyzing {file_path}")
                analyze_requirements_txt(file_path)

if __name__ == "__main__":
    main()
