import os
import re
import zipfile
import requests
import json
import subprocess

def get_installed_packages():
    result = subprocess.run(['pip', 'list', '--format=json'], stdout=subprocess.PIPE)
    packages = json.loads(result.stdout)
    return {pkg['name']: pkg['version'] for pkg in packages}

def get_legitimate_versions(package_name):
    response = requests.get(f'https://pypi.org/pypi/{package_name}/json')
    if response.status_code == 200:
        data = response.json()
        return list(data['releases'].keys())
    return []

def check_package_versions(packages):
    compromised_packages = []

    for pkg, version in packages.items():
        legitimate_versions = get_legitimate_versions(pkg)
        if legitimate_versions and version not in legitimate_versions:
            compromised_packages.append((pkg, version))

    return compromised_packages

def check_temp_directory():
    temp_dir = os.path.join(os.environ['LOCALAPPDATA'], 'Temp')
    compromised_files = []

    for root, dirs, files in os.walk(temp_dir):
        for dir in dirs:
            if re.match(r'pre_\d+_suf', dir):
                compromised_files.append(os.path.join(root, dir))

    return compromised_files

def check_registry():
    import winreg

    try:
        key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, r"Software\OpenAICLI")
        value, _ = winreg.QueryValueEx(key, "FunctionRun")
        winreg.CloseKey(key)
        if value == 1:
            return True
    except FileNotFoundError:
        return False

    return False

def analyze_wheel_file(wheel_file):
    compromised = False

    with zipfile.ZipFile(wheel_file, 'r') as zip_ref:
        for file in zip_ref.namelist():
            if file.endswith(('lib/browser/admin.py', 'openai/_OAI.py')):
                with zip_ref.open(file) as f:
                    content = f.read().decode()
                    if 'discord.com/api/webhooks' in content or 'Pastebin' in content:
                        compromised = True
                        if 'encrypted string' in content:
                            log(f"Encrypted string found in {file} of {wheel_file}. Please investigate further.")
                        break

    return compromised

def analyze_text_files(directory):
    compromised_files = []
    package_pattern = re.compile(r'(?P<name>[a-zA-Z0-9\-_.]+)==(?P<version>[0-9.]+)')
    pip_install_pattern = re.compile(r'pip\s+install\s+(?P<name>[a-zA-Z0-9\-_.]+)==(?P<version>[0-9.]+)')

    for root, _, files in os.walk(directory):
        for file in files:
            if file.endswith(('.txt', '.py', '.md', '.cfg', '.ini', '.json', '.yaml', '.yml')):
                with open(os.path.join(root, file), 'r', errors='ignore') as f:
                    content = f.read()
                    for match in package_pattern.finditer(content):
                        pkg = match.group('name')
                        version = match.group('version')
                        legitimate_versions = get_legitimate_versions(pkg)
                        if legitimate_versions and version not in legitimate_versions:
                            compromised_files.append((pkg, version, os.path.join(root, file)))
                    for match in pip_install_pattern.finditer(content):
                        pkg = match.group('name')
                        version = match.group('version')
                        legitimate_versions = get_legitimate_versions(pkg)
                        if legitimate_versions and version not in legitimate_versions:
                            compromised_files.append((pkg, version, os.path.join(root, file)))

    return compromised_files

def log(message):
    with open("malware_check_log.txt", "a") as log_file:
        log_file.write(message + "\n")
    print(message)

def main():
    log("Getting list of installed packages...")
    installed_packages = get_installed_packages()

    log("Checking package versions for legitimacy...")
    compromised_packages = check_package_versions(installed_packages)
    if compromised_packages:
        log(f"Compromised packages found: {compromised_packages}")
    else:
        log("No compromised packages found.")

    log("Checking temp directory for compromised files...")
    compromised_temp_files = check_temp_directory()
    if compromised_temp_files:
        log(f"Compromised files found in temp directory: {compromised_temp_files}")
    else:
        log("No compromised files found in temp directory.")

    log("Checking Windows registry for malicious entries...")
    if check_registry():
        log("Malicious registry entry found.")
    else:
        log("No malicious registry entries found.")

    log("Analyzing wheel files for malicious code...")
    wheel_files = [file for file in os.listdir() if file.endswith('.whl')]
    for wheel_file in wheel_files:
        if analyze_wheel_file(wheel_file):
            log(f"Compromised wheel file found: {wheel_file}")

    log("Analyzing text files for package legitimacy...")
    compromised_text_files = analyze_text_files('.')
    if compromised_text_files:
        log(f"Compromised text files found: {compromised_text_files}")
    else:
        log("No compromised text files found.")

if __name__ == "__main__":
    main()
